{ // @author josuerom
  "System.out.print()": {
    "prefix": "s",
    "body": [
      "System.out.print($1);"
    ],
    "description": "Standard data output"
  },
  "System.out.println()": {
    "prefix": "ss",
    "body": [
      "System.out.println($1);"
    ],
    "description": "Standard output with line break"
  },
  "System.out.prinf()": {
    "prefix": "sf",
    "body": [
      "System.out.printf(\"%$1\", $2);"
    ],
    "description": "Formatted standard output"
  },
  "System ternary operator": {
    "prefix": "sst",
    "body": [
      "System.out.println($1 ? $2 : $3);"
    ],
  },
  "System veredict Y/N": {
    "prefix": "ssv",
    "body": [
      "System.out.println($1 ? \"YES\" : \"NO\");"
    ],
  },
  "pw.print()": {
    "prefix": "p",
    "body": [
      "pw.print($1);"
    ],
    "description": "Print standard output"
  },
  "pw.println()": {
    "prefix": "pp",
    "body": [
      "pw.println($1);"
    ],
    "description": "Println standard output"
  },
  "pw.printf()": {
    "prefix": "pf",
    "body": [
      "pw.printf(\"%$1\", $2);"
    ],
    "description": "Printf standard output"
  },
  "Print ternary operator": {
    "prefix": "ppt",
    "body": [
      "pw.println($1 ? $2 : $3);"
    ],
  },
  "Print veredict Y/N": {
    "prefix": "ppv",
    "body": [
      "pw.println($1 ? \"YES\" : \"NO\");"
    ],
  },
  "Return ternary operator": {
    "prefix": "rot",
    "body": [
      "${1:boolean} $2 = ($3) ? $4 : $5;"
    ],
  },
  "Scanner(System.in)": {
    "prefix": "sc",
    "body": [
      "Scanner sc = new Scanner(System.in);$1"
    ],
    "description": "Standard input using the Scanner method"
  },
  "main() method": {
    "prefix": "fm",
    "body": [
      "public static void main(String[] authorJosuerom) {",
      "\t$1",
      "}"
    ],
    "description": "This is the main method that java executes"
  },
  "solve() method": {
    "prefix": "fsol",
    "body": [
      "static ${1:void} solve($2) {",
      "}"
    ]
  },
  "public static void nameMethod": {
    "prefix": "psv",
    "body": [
      "public static void ${1:nameMethod}($2) {",
      "}"
    ],
    "description": "Method I use most often"
  },
  "Method template": {
    "prefix": "temf",
    "body": [
      "public ${1:static} ${2:void} ${3:name}($4) {",
      "}"
    ],
    "description": "Template for create methods"
  },
  "try catch": {
    "prefix": "try",
    "body": [
      "try {",
      "\t$1",
      "} catch ($2 e) {",
      "\te.printStackTrace();",
      "}"
    ],
    "description": "Methods for handling exceptions"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) $2"
    ],
  },
  "else": {
    "prefix": "el",
    "body": [
      "else $2",
    ],
  },
  "else if ()": {
    "prefix": "eli",
    "body": [
      "else if ($1) $2",
    ],
  },
  "do while": {
    "prefix": "do",
    "body": [
      "do {\n\t$1",
      "} while ($2);"
    ],
  },
  "while": {
    "prefix": "wh",
    "body": [
      "while ($1) {",
      "}"
    ],
  },
  "for iterator": {
    "prefix": "fori",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {",
      "}"
    ],
  },
  "for reverse iterator": {
    "prefix": "forr",
    "body": [
      "for (int ${1:i} = $2; ${1:i} >= 0; ${1:i}--) {",
      "}"
    ],
  },
  "for each": {
    "prefix": "fore",
    "body": [
      "for (${1:int} e : $2) {",
      "}"
    ],
  },
  "Object creation": {
    "prefix": "obj",
    "body": [
      "${1:nameClass} ${2:name} = new ${1:nameConstructor}($3);"
    ],
  },
  "Constructor ()": {
    "prefix": "truc",
    "body": [
      "public ${TM_FILENAME_BASE}($1) {",
      "\tthis.$2 = $2;",
      "}"
    ],
  },
  "import": {
    "prefix": "im",
    "body": [
      "import java.$1;",
    ],
    "description": "Import packages"
  },
  "JavaClass Template": {
    "prefix": "class",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "\t$1",
      "}"
    ],
    "description": "JavaClass template"
  },
  "JavaMainClass Template": {
    "prefix": "mainclass",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] args) {",
      "\t\t$1",
      "\t}",
      "}"
    ],
    "description": "JavaMainClass template"
  },
  "Header": {
    "prefix": "@",
    "body": [
      "/**",
      " *   author:  josuerom",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/"
    ],
    "description": "Encabezado"
  },
  "Arrays()": {
    "prefix": "ar",
    "body": [
      "Arrays.$1($2);"
    ],
  },
  "Arrays.toString()": {
    "prefix": "tostr",
    "body": [
      "Arrays.toString($1)"
    ],
  },
  "Read int": {
    "prefix": "ri",
    "body": [
      "int $1 = fr.readInt();"
    ],
  },
  "Read String line": {
    "prefix": "rln",
    "body": [
      "String ln = fr.readLine();"
    ],
  },
  "Read long": {
    "prefix": "rl",
    "body": [
      "long $1 = fr.readLong();"
    ],
  },
  "Read double": {
    "prefix": "rd",
    "body": [
      "double $1 = fr.readDouble();"
    ],
  },
  "Read int n": {
    "prefix": "rn",
    "body": [
      "int n = fr.readInt();"
    ],
  },
  "Read int array": {
    "prefix": "rai",
    "body": [
      "int[] $2 = fr.readArray($1);"
    ],
  },
  "Read long array": {
    "prefix": "ral",
    "body": [
      "long[] $2 = fr.readArrayLong($1);"
    ],
  },
  "Read char[] array": {
    "prefix": "rac",
    "body": [
      "char[] $2 = fr.next().toCharArray();"
    ],
  },
  "Check execution time": {
    "prefix": "time",
    "body": [
      "long start = System.currentTimeMillis();",
      "System.err.println(\"time: \" + System.currentTimeMillis()-start);"
    ],
  },
  "read test cases": {
    "prefix": "tt",
    "body": [
      "int tt = fr.readInt();",
      "while (tt-- > 0) {",
      "\t$1",
      "\tsolve($2);",
      "}"
    ],
  },
  "read test cases with Scanner": {
    "prefix": "tc",
    "body": [
      "int t = sc.nextInt();",
      "while (t-- > 0) {",
      "\t$1",
      "\tsolve($2);",
      "}"
    ],
  },
  "set hour and date": {
    "prefix": "date",
    "body": [
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}"
    ],
  },
  "signature": {
    "prefix": "signature",
    "body": [
      "/**",
      "\t\t\t░░░░░██╗░█████╗░░██████╗██╗░░░██╗███████╗██████╗░░█████╗░███╗░░░███╗",
      "\t\t\t░░░░░██║██╔══██╗██╔════╝██║░░░██║██╔════╝██╔══██╗██╔══██╗████╗░████║",
      "\t\t\t░░░░░██║██║░░██║╚█████╗░██║░░░██║█████╗░░██████╔╝██║░░██║██╔████╔██║",
      "\t\t\t██╗░░██║██║░░██║░╚═══██╗██║░░░██║██╔══╝░░██╔══██╗██║░░██║██║╚██╔╝██║",
      "\t\t\t╚█████╔╝╚█████╔╝██████╔╝╚██████╔╝███████╗██║░░██║╚█████╔╝██║░╚═╝░██║",
      "\t\t\t░╚════╝░░╚════╝░╚═════╝░░╚═════╝░╚══════╝╚═╝░░╚═╝░╚════╝░╚═╝░░░░░╚═╝",
      "**/",
    ],
  },
  "style josuerom": {
    "prefix": "style",
    "body": [
      "/**",
      "   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█",
      "   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█",
      "**/",
    ]
  },
  "Template 1 for codeforces": {
    "prefix": "tem1",
    "body": [
      "/**",
      " *   author:  josuerom",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.io.BufferedReader;",
      "import java.io.IOException;",
      "import java.io.InputStreamReader;",
      "import java.io.PrintWriter;",
      "import java.util.Arrays;",
      "import java.util.Random;",
      "import java.util.StringTokenizer;",
      "import static java.lang.Math.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tstatic FastReader fr = new FastReader();",
      "\tstatic PrintWriter pw = new PrintWriter(System.out);",
      "\tstatic final Random random = new Random();",
      "\tstatic final int MOD = 1_000_000_007;",
      "\tstatic final int MAX = 1_000_007;",
      "\tstatic final boolean DEBUG = true;\n",
      "\tpublic static void main(String[] authorJosuerom) {",
      "\t\t${1:solve();}",
      "\t\tfr.close(); pw.close();",
      "\t}\n",
      "\tstatic void solve($3) {",
      "\t}\n",
      "\tstatic void ruffleSort(int[] a) {",
      "\t\tint n = a.length;",
      "\t\tfor (int i = 0; i < n; i++) {",
      "\t\t\tint oi = random.nextInt(n), temp = a[oi];",
      "\t\t\ta[oi] = a[i]; a[i] = temp;",
      "\t\t}",
      "\t\tArrays.sort(a);",
      "\t}\n",
      "\tstatic long add(long a, long b) {",
      "\t\treturn (a+b) % MOD;",
      "\t}",
      "\tstatic long sub(long a, long b) {",
      "\t\treturn ((a-b) % MOD + MOD) % MOD;",
      "\t}",
      "\tstatic long mul(long a, long b) {",
      "\t\treturn (a*b) % MOD;",
      "\t}",
      "\tstatic long div(long a, long b) {",
      "\t\treturn (a/b) % MOD;",
      "\t}",
      "\tstatic long exp(long base, long exp) {",
      "\t\tif (exp==0) return 1;",
      "\t\tlong half=exp(base, exp/2);",
      "\t\tif (exp%2==0) return mul(half, half);",
      "\t\treturn mul(half, mul(half, base));",
      "\t}\n",
      "\tstatic long[] factorials = new long[2_000_007];",
      "\tstatic long[] invFactorials = new long[2_000_007];\n",
      "\tstatic void precompFacts() {",
      "\t\tfactorials[0] = invFactorials[0] = 1;",
      "\t\tfor (int i = 1; i < factorials.length; i++) factorials[i] = mul(factorials[i-1], i);",
      "\t\tinvFactorials[factorials.length-1] = exp(factorials[factorials.length-1], MOD-2);",
      "\t\tfor (int i = invFactorials.length-2; i >= 0; i--) invFactorials[i] = mul(invFactorials[i+1], i+1);",
      "\t}",
      "\tstatic long nCr(int n, int r) {",
      "\t\treturn mul(factorials[n], mul(invFactorials[r], invFactorials[n-r]));",
      "\t}\n",
      "\tstatic class FastReader {",
      "\t\tBufferedReader br;",
      "\t\tStringTokenizer st;\n",
      "\t\tpublic FastReader() {",
      "\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));",
      "\t\t\tst = new StringTokenizer(\"\");",
      "\t\t}\n",
      "\t\tvoid close() {",
      "\t\t\ttry { br.close(); }",
      "\t\t\tcatch (IOException e) { e.printStackTrace(); }",
      "\t\t}\n",
      "\t\tString next() {",
      "\t\t\twhile (!st.hasMoreTokens()) {",
      "\t\t\t\ttry { st = new StringTokenizer(br.readLine()); }",
      "\t\t\t\tcatch (IOException e) { e.printStackTrace(); }",
      "\t\t\t}",
      "\t\t\treturn st.nextToken();",
      "\t\t}",
      "\t\tString readLine() {",
      "\t\t\tString line = null;",
      "\t\t\ttry { line = br.readLine(); }",
      "\t\t\tcatch (IOException e) { e.printStackTrace(); }",
      "\t\t\treturn line;",
      "\t\t}\n",
      "\t\tdouble readDouble() { return Double.parseDouble(next()); }",
      "\t\tlong readLong() { return Long.parseLong(next()); }",
      "\t\tint readInt() { return Integer.parseInt(next()); }\n",
      "\t\tlong[] readArrayLong(int N) {",
      "\t\t\tlong[] a = new long[N];",
      "\t\t\tfor (int i = 0; i < N; i++) { a[i] = readLong(); }",
      "\t\t\treturn a;",
      "\t\t}",
      "\t\tint[] readArray(int N) {",
      "\t\t\tint[] a = new int[N];",
      "\t\t\tfor (int i = 0; i < N; i++) { a[i] = readInt(); }",
      "\t\t\treturn a;",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Plantilla para soluciones efectivas y rápidas",
  },
  "Template 2 with all": {
    "prefix": "tem2",
    "body": [
      "/**",
      "   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█",
      "   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█",
      "   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.util.Scanner;",
      "import java.util.Arrays;",
      "import static java.lang.Math.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] authorJosuerom) {",
      "\t\treadInput();",
      "\t}\n",
      "\tstatic void readInput() {",
      "\t\tScanner sc = new Scanner(System.in);",
      "\t\t$1",
      "\t\tsc.close(); System.out.close();",
      "\t}\n",
      "\tstatic void solve($3) {",
      "\t}",
      "}"
    ],
    "description": "Plantilla estructurada para la CP(competitive programming)",
  },
  "Template 3 simple and ligth": {
    "prefix": "tem3",
    "body": [
      "/**",
      " *   author:  josuerom",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.util.Scanner;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] josuerom) {",
      "\t\tScanner sc = new Scanner(System.in);",
      "\t\t$1",
      "\t\tsc.close(); System.out.close();",
      "\t}",
      "}"
    ],
    "description": "Plantilla sencilla y liviana",
  },
  "Template 4 team 2 bits()": {
    "prefix": "tem4",
    "body": [
      "/**",
      "   █▀█  █▀▀▄ ─▀─ ▀▀█▀▀ █▀▀ ▄▀ ▀▄",
      "   ─▄▀  █▀▀▄ ▀█▀ ──█── ▀▀█ █─ ─█",
      "   █▄▄  ▀▀▀─ ▀▀▀ ──▀── ▀▀▀ ▀▄ ▄▀",
      "   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.io.BufferedReader;",
      "import java.io.IOException;",
      "import java.io.InputStreamReader;",
      "import java.io.PrintWriter;",
      "import java.util.Arrays;",
      "import java.util.Random;",
      "import java.util.StringTokenizer;",
      "import static java.lang.Math.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tstatic FastReader fr = new FastReader();",
      "\tstatic PrintWriter pw = new PrintWriter(System.out);",
      "\tstatic final Random random = new Random();",
      "\tstatic final int MOD = 1_000_000_007;",
      "\tstatic final int MAX = 1_000_007;",
      "\tstatic final boolean DEBUG = true;\n",
      "\tpublic static void main(String[] authorJosuerom) {",
      "\t\t${1:solve();}",
      "\t\tfr.close(); pw.close();",
      "\t}\n",
      "\tstatic void solve($3) {",
      "\t}\n",
      "\tstatic void ruffleSort(int[] a) {",
      "\t\tint n = a.length;",
      "\t\tfor (int i = 0; i < n; i++) {",
      "\t\t\tint oi = random.nextInt(n), temp = a[oi];",
      "\t\t\ta[oi] = a[i]; a[i] = temp;",
      "\t\t}",
      "\t\tArrays.sort(a);",
      "\t}\n",
      "\tstatic long add(long a, long b) {",
      "\t\treturn (a+b) % MOD;",
      "\t}",
      "\tstatic long sub(long a, long b) {",
      "\t\treturn ((a-b) % MOD + MOD) % MOD;",
      "\t}",
      "\tstatic long mul(long a, long b) {",
      "\t\treturn (a*b) % MOD;",
      "\t}",
      "\tstatic long div(long a, long b) {",
      "\t\treturn (a/b) % MOD;",
      "\t}",
      "\tstatic long exp(long base, long exp) {",
      "\t\tif (exp==0) return 1;",
      "\t\tlong half=exp(base, exp/2);",
      "\t\tif (exp%2==0) return mul(half, half);",
      "\t\treturn mul(half, mul(half, base));",
      "\t}\n",
      "\tstatic long[] factorials = new long[2_000_007];",
      "\tstatic long[] invFactorials = new long[2_000_007];\n",
      "\tstatic void precompFacts() {",
      "\t\tfactorials[0] = invFactorials[0] = 1;",
      "\t\tfor (int i = 1; i < factorials.length; i++) factorials[i] = mul(factorials[i-1], i);",
      "\t\tinvFactorials[factorials.length-1] = exp(factorials[factorials.length-1], MOD-2);",
      "\t\tfor (int i = invFactorials.length-2; i >= 0; i--) invFactorials[i] = mul(invFactorials[i+1], i+1);",
      "\t}",
      "\tstatic long nCr(int n, int r) {",
      "\t\treturn mul(factorials[n], mul(invFactorials[r], invFactorials[n-r]));",
      "\t}\n",
      "\tstatic class FastReader {",
      "\t\tBufferedReader br;",
      "\t\tStringTokenizer st;\n",
      "\t\tpublic FastReader() {",
      "\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));",
      "\t\t\tst = new StringTokenizer(\"\");",
      "\t\t}\n",
      "\t\tvoid close() {",
      "\t\t\ttry { br.close(); }",
      "\t\t\tcatch (IOException e) { e.printStackTrace(); }",
      "\t\t}\n",
      "\t\tString next() {",
      "\t\t\twhile (!st.hasMoreTokens()) {",
      "\t\t\t\ttry { st = new StringTokenizer(br.readLine()); }",
      "\t\t\t\tcatch (IOException e) { e.printStackTrace(); }",
      "\t\t\t}",
      "\t\t\treturn st.nextToken();",
      "\t\t}",
      "\t\tString readLine() {",
      "\t\t\tString line = null;",
      "\t\t\ttry { line = br.readLine(); }",
      "\t\t\tcatch (IOException e) { e.printStackTrace(); }",
      "\t\t\treturn line;",
      "\t\t}\n",
      "\t\tdouble readDouble() { return Double.parseDouble(next()); }",
      "\t\tlong readLong() { return Long.parseLong(next()); }",
      "\t\tint readInt() { return Integer.parseInt(next()); }\n",
      "\t\tlong[] readArrayLong(int N) {",
      "\t\t\tlong[] a = new long[N];",
      "\t\t\tfor (int i = 0; i < N; i++) { a[i] = readLong(); }",
      "\t\t\treturn a;",
      "\t\t}",
      "\t\tint[] readArray(int N) {",
      "\t\t\tint[] a = new int[N];",
      "\t\t\tfor (int i = 0; i < N; i++) { a[i] = readInt(); }",
      "\t\t\treturn a;",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Plantilla del equipo 2 Bits() UNIMINUTO",
  }
}
