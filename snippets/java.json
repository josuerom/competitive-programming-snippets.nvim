{ // @author josuerom
  "System.out.print()": {
    "prefix": "s",
    "body": [
      "System.out.print($1);"
    ],
    "description": "Standard data output"
  },
  "System.out.println()": {
    "prefix": "ss",
    "body": [
      "System.out.println($1);"
    ],
    "description": "Standard output with line break"
  },
  "System.out.prinf()": {
    "prefix": "sf",
    "body": [
      "System.out.printf(\"%$1\", $2);"
    ],
    "description": "Formatted standard output"
  },
  "System ternary operator": {
    "prefix": "sst",
    "body": [
      "System.out.println($1 ? $2 : $3);"
    ],
  },
  "System veredict Y/N": {
    "prefix": "ssv",
    "body": [
      "System.out.println($1 ? \"YES\" : \"NO\");"
    ],
  },
  "pw.print()": {
    "prefix": "p",
    "body": [
      "io.print($1);"
    ],
    "description": "Print standard output"
  },
  "pw.println()": {
    "prefix": "pp",
    "body": [
      "io.println($1);"
    ],
    "description": "Println standard output"
  },
  "pw.printf()": {
    "prefix": "pf",
    "body": [
      "io.printf(\"%$1\", $2);"
    ],
    "description": "Printf standard output"
  },
  "Print ternary operator": {
    "prefix": "ppt",
    "body": [
      "io.println($1 ? $2 : $3);"
    ],
  },
  "Print veredict Y/N": {
    "prefix": "ppv",
    "body": [
      "io.println($1 ? \"YES\" : \"NO\");"
    ],
  },
  "Return ternary operator": {
    "prefix": "rot",
    "body": [
      "${1:boolean} $2 = ($3) ? $4 : $5;"
    ],
  },
  "Scanner(System.in)": {
    "prefix": "sc",
    "body": [
      "Scanner sc = new Scanner(System.in);$1"
    ],
    "description": "Standard input using the Scanner method"
  },
  "main() method": {
    "prefix": "fm",
    "body": [
      "public static void main(String[] authorJosuerom) {",
      "\t$1",
      "}"
    ],
    "description": "This is the main method that java executes"
  },
  "solve() method": {
    "prefix": "fsol",
    "body": [
      "static ${1:void} solve($2) {",
      "}"
    ]
  },
  "public static void nameMethod": {
    "prefix": "psv",
    "body": [
      "public static void ${1:nameMethod}($2) {",
      "}"
    ],
    "description": "Method I use most often"
  },
  "Method template": {
    "prefix": "temf",
    "body": [
      "public ${1:static} ${2:void} ${3:name}($4) {",
      "}"
    ],
    "description": "Template for create methods"
  },
  "try catch": {
    "prefix": "try",
    "body": [
      "try {",
      "\t$1",
      "} catch ($2 e) {",
      "\te.printStackTrace();",
      "}"
    ],
    "description": "Methods for handling exceptions"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) $2"
    ],
  },
  "else": {
    "prefix": "el",
    "body": [
      "else $2",
    ],
  },
  "else if ()": {
    "prefix": "eli",
    "body": [
      "else if ($1) $2",
    ],
  },
  "do while": {
    "prefix": "do",
    "body": [
      "do {\n\t$1",
      "} while ($2);"
    ],
  },
  "while": {
    "prefix": "wh",
    "body": [
      "while ($1) {",
      "}"
    ],
  },
  "for iterator": {
    "prefix": "fori",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++) {",
      "}"
    ],
  },
  "for reverse iterator": {
    "prefix": "forr",
    "body": [
      "for (int ${1:i} = $2; ${1:i} >= 0; ${1:i}--) {",
      "}"
    ],
  },
  "for each": {
    "prefix": "fore",
    "body": [
      "for (${1:int} e : $2) {",
      "}"
    ],
  },
  "Object creation": {
    "prefix": "obj",
    "body": [
      "${1:nameClass} ${2:name} = new ${1:nameConstructor}($3);"
    ],
  },
  "Constructor ()": {
    "prefix": "truc",
    "body": [
      "public ${TM_FILENAME_BASE}($1) {",
      "\tthis.$2 = $2;",
      "}"
    ],
  },
  "import": {
    "prefix": "im",
    "body": [
      "import java.$1;",
    ],
    "description": "Import packages"
  },
  "JavaClass Template": {
    "prefix": "class",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "\t$1",
      "}"
    ],
    "description": "JavaClass template"
  },
  "JavaMainClass Template": {
    "prefix": "mainclass",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] args) {",
      "\t\t$1",
      "\t}",
      "}"
    ],
    "description": "JavaMainClass template"
  },
  "Header": {
    "prefix": "author",
    "body": [
      "/**",
      " *   author:  josuerom",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/"
    ],
    "description": "Encabezado"
  },
  "Date": {
    "prefix": "date",
    "body": [
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
    ],
    "description": "Encabezado"
  },
  "Arrays.toString()": {
    "prefix": "tostr",
    "body": [
      "Arrays.toString($1)"
    ],
  },
  "Set static array": {
    "prefix": "arr",
    "body": [
      "{$1:int} a$2 = new {$1:int}[$3];"
    ],
  },
  "Read int": {
    "prefix": "ri",
    "body": [
      "int $1 = io.nextInt();"
    ],
  },
  "Read String line": {
    "prefix": "rln",
    "body": [
      "String ln = io.nextLine();"
    ],
  },
  "Read long": {
    "prefix": "rl",
    "body": [
      "long $1 = io.nextLong();"
    ],
  },
  "Read double": {
    "prefix": "rd",
    "body": [
      "double $1 = io.nextDouble();"
    ],
  },
  "Read int array": {
    "prefix": "rarr",
    "body": [
      "int[] $1 = io.readArray($2);"
    ],
  },
  "Read char[] array": {
    "prefix": "rac",
    "body": [
      "char[] $2 = io.next().toCharArray();"
    ],
  },
  "read test cases": {
    "prefix": "tt",
    "body": [
      "int tt = io.nextInt();",
      "while (tt-- > 0) {",
      "\t$1",
      "\tsolve(io, $2);",
      "}",
    ],
  },
  "read test cases with Scanner": {
    "prefix": "tc",
    "body": [
      "int tc = sc.nextInt();",
      "while (tc-- > 0) {",
      "\t$1",
      "\tsolve($2);",
      "}"
    ],
  },
  "style josuerom": {
    "prefix": "josuerom",
    "body": [
      "/**",
      "   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█",
      "   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█",
      "**/",
    ]
  },
  "Template 1 for CP": {
    "prefix": "tem1",
    "body": [
      "/**",
      " *   author:  josuerom",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.io.*;",
      "import java.util.*;",
      "import static java.lang.Math.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "   public static void main(String[] args) {",
      "      try (FastReader io = new FastReader()) {",
      "         $1",
      "      }",
      "      System.exit(0);",
      "   }",
      "",
      "   public static void solve(FastReader io$3) {",
      "   }",
      "",
      "   static class FastReader extends PrintWriter {",
      "      private BufferedReader br;",
      "      private StringTokenizer st;",
      "",
      "      public FastReader() {",
      "         this(System.in, System.out);",
      "      }",
      "",
      "      public FastReader(InputStream i, OutputStream o) {",
      "         super(o);",
      "         br = new BufferedReader(new InputStreamReader(i));",
      "      }",
      "",
      "      public FastReader(String idFile) throws IOException {",
      "         super(\"samples/output.out\");",
      "         br = new BufferedReader(new FileReader(\"samples/\" + idFile));",
      "      }",
      "",
      "      public String next() {",
      "         try {",
      "            while (st == null || !st.hasMoreTokens())",
      "               st = new StringTokenizer(br.readLine());",
      "            return st.nextToken();",
      "         } catch (Exception e) {",
      "            e.printStackTrace();",
      "         }",
      "         return null;",
      "      }",
      "",
      "      public String nextLine() {",
      "         String line = null;",
      "         try {",
      "            line = br.readLine();",
      "         } catch (IOException e) {",
      "            e.printStackTrace();",
      "         }",
      "         return line;",
      "      }",
      "",
      "      public int nextInt() {",
      "         return Integer.parseInt(next());",
      "      }",
      "",
      "      public long nextLong() {",
      "         return Long.parseLong(next());",
      "      }",
      "",
      "      public double nextDouble() {",
      "         return Double.parseDouble(next());",
      "      }",
      "",
      "      public int[] readArray(int n) {",
      "         int[] a = new int[n];",
      "         for (int i = 0; i < n; i++) {",
      "            a[i] = nextInt();",
      "         }",
      "         return a;",
      "      }",
      "   }",
      "}"
    ],
    "description": "Plantilla efectiva y efizaz",
  },
  "Template 2 team 2 Bits()": {
    "prefix": "tem2",
    "body": [
      "/**",
      " *  █▀█  █▀▀▄ ─▀─ ▀▀█▀▀ █▀▀ ▄▀ ▀▄",
      " *  ─▄▀  █▀▀▄ ▀█▀ ──█── ▀▀█ █─ ─█",
      " *  █▄▄  ▀▀▀─ ▀▀▀ ──▀── ▀▀▀ ▀▄ ▄▀",
      " *  created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      " **/",
      "import java.io.*;",
      "import java.util.*;",
      "import static java.lang.Math.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "   public static void main(String[] _2BITS) {",
      "      try (FastReader io = new FastReader()) {",
      "         $1",
      "      }",
      "      System.exit(0);",
      "   }",
      "",
      "   public static void solve(FastReader io$3) {",
      "   }",
      "",
      "   static class FastReader extends PrintWriter {",
      "      private BufferedReader br;",
      "      private StringTokenizer st;",
      "",
      "      public FastReader() {",
      "         this(System.in, System.out);",
      "      }",
      "",
      "      public FastReader(InputStream i, OutputStream o) {",
      "         super(o);",
      "         br = new BufferedReader(new InputStreamReader(i));",
      "      }",
      "",
      "      public FastReader(String idFile) throws IOException {",
      "         super(\"samples/output.out\");",
      "         br = new BufferedReader(new FileReader(\"samples/\" + idFile));",
      "      }",
      "",
      "      public String next() {",
      "         try {",
      "            while (st == null || !st.hasMoreTokens())",
      "               st = new StringTokenizer(br.readLine());",
      "            return st.nextToken();",
      "         } catch (Exception e) {",
      "            e.printStackTrace();",
      "         }",
      "         return null;",
      "      }",
      "",
      "      public String nextLine() {",
      "         String line = null;",
      "         try {",
      "            line = br.readLine();",
      "         } catch (IOException e) {",
      "            e.printStackTrace();",
      "         }",
      "         return line;",
      "      }",
      "",
      "      public int nextInt() {",
      "         return Integer.parseInt(next());",
      "      }",
      "",
      "      public long nextLong() {",
      "         return Long.parseLong(next());",
      "      }",
      "",
      "      public double nextDouble() {",
      "         return Double.parseDouble(next());",
      "      }",
      "",
      "      public int[] readArray(int n) {",
      "         int[] a = new int[n];",
      "         for (int i = 0; i < n; i++) {",
      "            a[i] = nextInt();",
      "         }",
      "         return a;",
      "      }",
      "   }",
      "}"
    ],
    "description": "Plantilla equipo 2 Bits() RPC",
  },
  "Template 3 simple and ligth": {
    "prefix": "tem3",
    "body": [
      "/**",
      "   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█",
      "   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█",
      "**/",
      "import java.util.Scanner;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] args) {",
      "\t\tScanner sc = new Scanner(System.in);",
      "\t\tint tt = sc.nextInt();$1",
      "\t\twhile (tt-- > 0) {",
      "\t\t}",
      "\t\tSystem.exit(0);",
      "\t}",
      "}",
    ],
    "description": "Plantilla sencilla y liviana",
  }
}
