{ // @author josuerom
  "System.out.print()": {
    "prefix": "s",
    "body": [
      "System.out.print($1);"
    ],
    "description": "Standard data output"
  },
  "System.out.println()": {
    "prefix": "ss",
    "body": [
      "System.out.println($1);"
    ],
    "description": "Standard output with line break"
  },
  "System.out.prinf()": {
    "prefix": "sf",
    "body": [
      "System.out.printf(\"%$1\", $2);"
    ],
    "description": "Formatted standard output"
  },
  "System ternary operator": {
    "prefix": "sot",
    "body": [
      "System.out.println($1 ? $2 : $3);"
    ],
  },
  "System veredict Y/N": {
    "prefix": "sov",
    "body": [
      "System.out.println($1 ? \"YES\" : \"NO\");"
    ],
  },
  "pw.print()": {
    "prefix": "p",
    "body": [
      "io.print($1);"
    ],
    "description": "Print standard output"
  },
  "pw.println()": {
    "prefix": "pp",
    "body": [
      "io.println($1);"
    ],
    "description": "Println standard output"
  },
  "Print ternary operator": {
    "prefix": "ppt",
    "body": [
      "io.println($1 ? $2 : $3);"
    ],
  },
  "Print veredict Y/N": {
    "prefix": "ppv",
    "body": [
      "io.println($1 ? \"YES\" : \"NO\");"
    ],
  },
  "pw.printf()": {
    "prefix": "pf",
    "body": [
      "io.printf(\"%d$1\\n\", $2);"
    ],
    "description": "Printf with format"
  },
  "Return ternary operator": {
    "prefix": "aot",
    "body": [
      "${1:boolean} $2 = ($3) ? $4 : $5;"
    ],
  },
  "Scanner(System.in)": {
    "prefix": "sc",
    "body": [
      "Scanner sc = new Scanner(System.in);$1"
    ],
    "description": "Standard input using the Scanner method"
  },
  "main() method": {
    "prefix": "fm",
    "body": [
      "public static void main(String[] args) {",
      "\t$1",
      "}"
    ],
    "description": "This is the main method that java executes"
  },
  "solve() method": {
    "prefix": "fsol",
    "body": [
      "public static ${1:void} solve($2) {",
      "}"
    ]
  },
  "public static void nameMethod": {
    "prefix": "psv",
    "body": [
      "public static void ${1:nameMethod}($2) {",
      "}"
    ],
    "description": "Method I use most often"
  },
  "Method template": {
    "prefix": "funpre",
    "body": [
      "public static ${1:void} preCalculate($2) {",
      "}"
    ],
    "description": "Function preCalculate"
  },
  "try catch": {
    "prefix": "try",
    "body": [
      "try {",
      "\t$1",
      "} catch (Exception$2 e) {",
      "\te.printStackTrace();",
      "}"
    ],
    "description": "Methods for handling exceptions"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) $2"
    ],
  },
  "else": {
    "prefix": "el",
    "body": [
      "else $2",
    ],
  },
  "else if ()": {
    "prefix": "eli",
    "body": [
      "else if ($1) $2",
    ],
  },
  "do while": {
    "prefix": "do",
    "body": [
      "do {\n\t$1",
      "} while ($2);"
    ],
  },
  "while": {
    "prefix": "wh",
    "body": [
      "while ($1) {",
      "}"
    ],
  },
  "for iterator": {
    "prefix": "fori",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < $2; ${1:i}++) $3{",
      "}"
    ],
  },
  "for reverse iterator": {
    "prefix": "forr",
    "body": [
      "for (int ${1:i} = $2 - 1; ${1:i} >= 0; ${1:i}--) $3{",
      "}"
    ],
  },
  "for each": {
    "prefix": "fore",
    "body": [
      "for (${1:int} e : $2) ${3:System.out}.print(e + \" \");",
      "${3:System.out}.println();"
    ],
  },
  "Object creation": {
    "prefix": "obj",
    "body": [
      "${1:nameClass} ${2:name} = new ${1:nameConstructor}();"
    ],
  },
  "Constructor ()": {
    "prefix": "construct",
    "body": [
      "public ${TM_FILENAME_BASE}($1) {",
      "\tthis.$2 = $2;",
      "}"
    ],
  },
  "import": {
    "prefix": "in",
    "body": [
      "import java.$1;",
    ],
    "description": "Import packages"
  },
  "JavaClass Template": {
    "prefix": "class",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "\t$1",
      "}"
    ],
    "description": "JavaClass template"
  },
  "JavaMainClass Template": {
    "prefix": "mainclass",
    "body": [
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] args) {",
      "\t\t$1",
      "\t}",
      "}"
    ],
    "description": "JavaMainClass template"
  },
  "Header": {
    "prefix": "author",
    "body": [
      "/**",
      " *   author:  josuerom",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/"
    ],
    "description": "Encabezado"
  },
  "Date": {
    "prefix": "date",
    "body": [
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
    ],
    "description": "Encabezado"
  },
  "Arrays.toString()": {
    "prefix": "tostr",
    "body": [
      "Arrays.toString($1)"
    ],
  },
  "Set static array": {
    "prefix": "arr",
    "body": [
      "${1:int}[] a$2 = new ${1:int}[MAX$3];"
    ],
  },
  "Read int": {
    "prefix": "ri",
    "body": [
      "int $1 = io.nextInt();"
    ],
  },
  "Read Line": {
    "prefix": "rln",
    "body": [
      "String line = io.nextLine();"
    ],
  },
  "Read long": {
    "prefix": "rl",
    "body": [
      "long $1 = io.nextLong();"
    ],
  },
  "Read double": {
    "prefix": "rd",
    "body": [
      "double $1 = io.nextDouble();"
    ],
  },
  "Read int[] array": {
    "prefix": "rai",
    "body": [
      "int[] $1 = io.readArray($2);"
    ],
  },
  "Read char[] array": {
    "prefix": "rac",
    "body": [
      "char[] $2 = io.next().toCharArray();"
    ],
  },
  "Read long[] array": {
    "prefix": "ral",
    "body": [
      "long[] $2 = io.next().readArray();"
    ],
  },
  "Read double[] array": {
    "prefix": "rad",
    "body": [
      "double[] $2 = io.next().readArray();"
    ],
  },
  "Set constant int": {
    "prefix": "N",
    "body": [
      "static final int N = 1$1_000_000;"
    ],
  },
  "read test cases": {
    "prefix": "tt",
    "body": [
      "int tt = io.nextInt();",
      "while (tt-- > 0) solve(io);",
    ],
  },
  "no test cases": {
    "prefix": "nt",
    "body": [
      "solve(io);"
    ],
  },
  "style josuerom": {
    "prefix": "header",
    "body": [
      "/**",
      "   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█",
      "   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█",
      "   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
    ]
  },
  "Codeforces template": {
    "prefix": "tem1",
    "body": [
      "/**",
      " *   author:  josuerom",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.io.*;",
      "import java.util.*;",
      "import static java.lang.Math.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] args) {",
      "\t\ttry (FastReader io = new FastReader()) {",
      "\t\t\tint tt = 1;",
      "\t\t\t// tt = io.nextInt();$1",
      "\t\t\twhile (tt-- > 0) solve(io);",
      "\t\t}",
      "\t\tSystem.exit(0);",
      "\t}",
      "",
      "\tpublic static void solve(FastReader io) {$2",
      "\t}",
      "",
      "\tstatic class FastReader extends PrintWriter {",
      "\t\tprivate BufferedReader br;",
      "\t\tprivate StringTokenizer st;",
      "",
      "\t\tpublic FastReader() {",
      "\t\t\tthis(System.in, System.out);",
      "\t\t}",
      "",
      "\t\tpublic FastReader(InputStream i, OutputStream o) {",
      "\t\t\tsuper(o);",
      "\t\t\tbr = new BufferedReader(new InputStreamReader(i));",
      "\t\t}",
      "",
      "\t\tpublic FastReader(String idFile) throws IOException {",
      "\t\t\tsuper(\"samples/output.out\");",
      "\t\t\tbr = new BufferedReader(new FileReader(\"samples/\" + idFile));",
      "\t\t}",
      "",
      "\t\tpublic String next() {",
      "\t\t\ttry {",
      "\t\t\t\twhile (st == null || !st.hasMoreTokens())",
      "\t\t\t\t\tst = new StringTokenizer(br.readLine());",
      "\t\t\t\treturn st.nextToken();",
      "\t\t\t} catch (Exception e) {",
      "\t\t\t\te.printStackTrace();",
      "\t\t\t}",
      "\t\t\treturn null;",
      "\t\t}",
      "",
      "\t\tpublic String nextLine() {",
      "\t\t\tString line = null;",
      "\t\t\ttry {",
      "\t\t\t\tline = br.readLine();",
      "\t\t\t} catch (IOException e) {",
      "\t\t\t\te.printStackTrace();",
      "\t\t\t}",
      "\t\t\treturn line;",
      "\t\t}",
      "",
      "\t\tpublic int nextInt() {",
      "\t\t\treturn Integer.parseInt(next());",
      "\t\t}",
      "",
      "\t\tpublic long nextLong() {",
      "\t\t\treturn Long.parseLong(next());",
      "\t\t}",
      "",
      "\t\tpublic double nextDouble() {",
      "\t\t\treturn Double.parseDouble(next());",
      "\t\t}",
      "",
      "\t\tpublic int[] readArray(int n) {",
      "\t\t\tint[] a = new int[n];",
      "\t\t\tfor (int i = 0; i < n; i++) {",
      "\t\t\t\ta[i] = nextInt();",
      "\t\t\t}",
      "\t\t\treturn a;",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Plantilla efectiva y efizaz"
  },
  "Ultra ligth template": {
    "prefix": "tem2",
    "body": [
      "/**",
      "   ░░█ █▀█ █▀ █░█ █▀▀ █▀█ █▀█ █▀▄▀█",
      "   █▄█ █▄█ ▄█ █▄█ ██▄ █▀▄ █▄█ █░▀░█",
      "   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.util.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] args) {",
      "\t\tScanner sc = new Scanner(System.in);",
      "\t\t$1",
      "\t\tSystem.exit(0);",
      "\t}",
      "}"
    ],
    "description": "Plantilla estandar simple"
  },
  "2 Bits() template": {
    "prefix": "tem3",
    "body": [
      "/**",
      " *   █▀█  █▀▀▄ ─▀─ ▀▀█▀▀ █▀▀ ▄▀ ▀▄",
      " *   ─▄▀  █▀▀▄ ▀█▀ ──█── ▀▀█ █─ ─█",
      " *   █▄▄  ▀▀▀─ ▀▀▀ ──▀── ▀▀▀ ▀▄ ▄▀",
      " *   created: ${CURRENT_DATE}/${CURRENT_MONTH}/${CURRENT_YEAR_SHORT} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "**/",
      "import java.io.*;",
      "import java.util.*;",
      "import static java.lang.Math.*;\n",
      "public class ${TM_FILENAME_BASE} {",
      "\tpublic static void main(String[] args) {",
      "\t\ttry (FastReader io = new FastReader()) {",
      "\t\t\tint tt = 1;",
      "\t\t\t// tt = io.nextInt();$1",
      "\t\t\twhile (tt-- > 0) solve(io);",
      "\t\t}",
      "\t\tSystem.exit(0);",
      "\t}",
      "",
      "\tpublic static void solve(FastReader io) {$2",
      "\t}",
      "",
      "\tstatic class FastReader extends PrintWriter {",
      "\t\tprivate BufferedReader br;",
      "\t\tprivate StringTokenizer st;",
      "",
      "\t\tpublic FastReader() {",
      "\t\t\tthis(System.in, System.out);",
      "\t\t}",
      "",
      "\t\tpublic FastReader(InputStream i, OutputStream o) {",
      "\t\t\tsuper(o);",
      "\t\t\tbr = new BufferedReader(new InputStreamReader(i));",
      "\t\t}",
      "",
      "\t\tpublic FastReader(String idFile) throws IOException {",
      "\t\t\tsuper(\"samples/output.out\");",
      "\t\t\tbr = new BufferedReader(new FileReader(\"samples/\" + idFile));",
      "\t\t}",
      "",
      "\t\tpublic String next() {",
      "\t\t\ttry {",
      "\t\t\t\twhile (st == null || !st.hasMoreTokens())",
      "\t\t\t\t\tst = new StringTokenizer(br.readLine());",
      "\t\t\t\treturn st.nextToken();",
      "\t\t\t} catch (Exception e) {",
      "\t\t\t\te.printStackTrace();",
      "\t\t\t}",
      "\t\t\treturn null;",
      "\t\t}",
      "",
      "\t\tpublic String nextLine() {",
      "\t\t\tString line = null;",
      "\t\t\ttry {",
      "\t\t\t\tline = br.readLine();",
      "\t\t\t} catch (IOException e) {",
      "\t\t\t\te.printStackTrace();",
      "\t\t\t}",
      "\t\t\treturn line;",
      "\t\t}",
      "",
      "\t\tpublic int nextInt() {",
      "\t\t\treturn Integer.parseInt(next());",
      "\t\t}",
      "",
      "\t\tpublic long nextLong() {",
      "\t\t\treturn Long.parseLong(next());",
      "\t\t}",
      "",
      "\t\tpublic double nextDouble() {",
      "\t\t\treturn Double.parseDouble(next());",
      "\t\t}",
      "",
      "\t\tpublic int[] readArray(int n) {",
      "\t\t\tint[] a = new int[n];",
      "\t\t\tfor (int i = 0; i < n; i++) {",
      "\t\t\t\ta[i] = nextInt();",
      "\t\t\t}",
      "\t\t\treturn a;",
      "\t\t}",
      "\t}",
      "}"
    ],
    "description": "Plantilla equipo 2 Bits()"
  }
}
